<canvas id="budgetChart"></canvas>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // récupérer tes budgets côté client
  const budgets = [];
  <% dependencies.budget.forEach(function(element) { %>
    budgets.push({
      start: new Date("<%= element.dateStart %>"),
      end: new Date("<%= element.dateEnd %>"),
      hours: <%= element.heure %>
    });
  <% }) %>

  // maintenant on génère les points pour la courbe
  let dates = [];
  budgets.forEach(b => {
    dates.push(b.start);
    dates.push(b.end);
  });

  dates = [...new Set(dates.map(d => d.getTime()))]
    .sort((a, b) => a - b)
    .map(t => new Date(t));

  let chartData = [];
  let cumulative = 0;

  for (let i = 0; i < dates.length - 1; i++) {
    const start = dates[i];
    const end = dates[i + 1];
    const deltaDays = (end - start) / (1000 * 60 * 60 * 24);

    // budgets actifs pendant cet intervalle
    const active = budgets.filter(b => b.start <= start && b.end >= end);

    // calcul du taux d'accumulation (heures/jour)
    let rate = 0;
    active.forEach(b => {
      const durationDays = (b.end - b.start) / (1000 * 60 * 60 * 24);
      rate += b.hours / durationDays;
    });

    chartData.push({ x: start.toISOString().split("T")[0], y: cumulative });
    cumulative += rate * deltaDays;
    chartData.push({ x: end.toISOString().split("T")[0], y: cumulative });
  }

  // affichage du graphique
  new Chart(document.getElementById("budgetChart"), {
    type: "line",
    data: {
      datasets: [{
        label: "Budgets cumulés",
        data: chartData,
        stepped: true,
        borderColor: "blue",
        fill: false
      }]
    },
    options: {
      parsing: { xAxisKey: "x", yAxisKey: "y" },
      scales: {
        x: { type: "time", time: { unit: "day" } },
        y: { beginAtZero: true }
      }
    }
  });
</script>
