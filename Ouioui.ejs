<canvas id="budgetChart"></canvas>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // récupérer budgets depuis le serveur
  const budgets = <%- JSON.stringify(budgets) %>;

  function buildChartData(budgets) {
    // transformer budgets en {start, end, hours}
    const data = budgets.map(b => ({
      start: new Date(b.dateStart),
      end: new Date(b.dateEnd),
      hours: b.heure
    }));

    // extraire toutes les dates importantes
    let dates = [];
    data.forEach(b => {
      dates.push(b.start);
      dates.push(b.end);
    });
    dates = [...new Set(dates.map(d => d.getTime()))]
      .sort((a, b) => a - b)
      .map(t => new Date(t));

    // calculer évolution cumulative
    let chartData = [];
    let cumulative = 0;

    for (let i = 0; i < dates.length - 1; i++) {
      const start = dates[i];
      const end = dates[i + 1];
      const deltaDays = (end - start) / (1000 * 60 * 60 * 24);

      // budgets actifs sur ce segment
      const active = data.filter(b => b.start <= start && b.end >= end);

      // taux horaire/jour cumulé
      let rate = 0;
      active.forEach(b => {
        const durationDays = (b.end - b.start) / (1000 * 60 * 60 * 24);
        rate += b.hours / durationDays;
      });

      chartData.push({ x: start.toISOString().split("T")[0], y: cumulative });
      cumulative += rate * deltaDays;
      chartData.push({ x: end.toISOString().split("T")[0], y: cumulative });
    }

    return chartData;
  }

  const chartData = buildChartData(budgets);

  new Chart(document.getElementById("budgetChart"), {
    type: "line",
    data: {
      datasets: [{
        label: "Budgets cumulés",
        data: chartData,
        stepped: true,
        borderColor: "blue",
        fill: false
      }]
    },
    options: {
      parsing: { xAxisKey: "x", yAxisKey: "y" },
      scales: {
        x: { type: "time", time: { unit: "day" } },
        y: { beginAtZero: true }
      }
    }
  });
</script>
