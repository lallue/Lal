<script>
  // labels d√©j√† construits chez toi (janvier 2024, f√©vrier 2024, ‚Ä¶)
  const budgetParMois = new Array(labels.length).fill(0);

  <% dependencies.budget.forEach(function (element) { %>
    (function () {
      const start  = new Date("<%= element.dateStart %>");
      const end    = new Date("<%= element.dateEnd %>");
      const total  = Math.round(<%= element.heure %>); // on force un entier

      const startLabel = `${moisLabels[start.getMonth() + 1]} ${start.getFullYear()}`;
      const endLabel   = `${moisLabels[end.getMonth() + 1]} ${end.getFullYear()}`;

      const si = labels.indexOf(startLabel);
      const ei = labels.indexOf(endLabel);
      if (si < 0 || ei < 0 || ei < si) return;

      const nbMois = (ei - si + 1);
      const base   = Math.floor(total / nbMois); // part enti√®re
      let reste    = total % nbMois;             // reste √† r√©partir

      for (let i = si; i <= ei; i++) {
        // on ajoute 1 aux "reste" premiers mois
        budgetParMois[i] += base + (reste > 0 ? 1 : 0);
        if (reste > 0) reste--;
      }
    })();
  <% }) %>

  // cumul (escalier) du budget
  const budgetCumul = [];
  budgetParMois.reduce((acc, v, i) => (budgetCumul[i] = acc + v), 0);
</script>

<script>
  // data = tes heures par mois (barres)
  // dataCumul = cumul des heures consomm√©es (tu l‚Äôas d√©j√†)
  // budgetCumul = calcul√© plus haut

  const chart = new Chart(ctx, {
    data: {
      labels,
      datasets: [
        // 1) Histogramme (heures du mois) ‚Äì tu peux garder ta coloration par barre
        {
          type: 'bar',
          label: 'Heures point√©es',
          data: data,
          backgroundColor: data.map((_, i) =>
            (dataCumul[i] > (budgetCumul[i] ?? Infinity)) ? 'red' : '#007bff'
          )
        },

        // 2) Courbe cumul DES HEURES avec tron√ßons color√©s dynamiquement
        {
          type: 'line',
          label: 'Heures cumul√©es',
          data: dataCumul,
          stepped: true,
          fill: false,
          borderWidth: 2,
          // üëá couleur par tron√ßon
          segment: {
            borderColor: (ctx) => {
              const i  = ctx.p0DataIndex; // d√©but du segment
              const y0 = ctx.p0.parsed.y;
              const y1 = ctx.p1.parsed.y;
              const b0 = budgetCumul[i] ?? Number.POSITIVE_INFINITY;
              const b1 = budgetCumul[i + 1] ?? Number.POSITIVE_INFINITY;
              // si l‚Äôun des 2 points du segment est au-dessus du budget -> rouge
              return (y0 > b0 || y1 > b1) ? 'red' : 'green';
            }
          }
        },

        // 3) Courbe cumul DU BUDGET (r√©f√©rence)
        {
          type: 'line',
          label: 'Budget cumul',
          data: budgetCumul,
          stepped: true,
          fill: false,
          borderWidth: 2,
          borderColor: '#555',
        }
      ]
    },
    options: {
      scales: { y: { beginAtZero: true } }
    }
  });
</script>
