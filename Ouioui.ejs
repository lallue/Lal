const { exec } = require("child_process");
const path = require("path");
const fs = require("fs");
const csv = require("csv-parser"); // ton parser
const { insertRowInDB } = require("../services/dbService"); // exemple, ton service d'insert

exports.handleUpload = async (req, res) => {
  try {
    const xlsPath = req.file.path;
    const baseName = path.basename(xlsPath, path.extname(xlsPath));
    const csvName = `${baseName}.csv`;
    const csvPath = path.join(path.dirname(xlsPath), csvName);

    // --- Étape 1 : exécuter script python ---
    await new Promise((resolve, reject) => {
      const cmd = `python ./b.py "${xlsPath}" "Resultat"`;
      exec(cmd, (error, stdout, stderr) => {
        if (error) return reject(error);
        if (stderr) console.error("stderr:", stderr);
        resolve();
      });
    });

    // --- Étape 2 : déplacer le CSV ---
    const destDir = path.resolve("upload/temp");
    if (!fs.existsSync(destDir)) {
      fs.mkdirSync(destDir, { recursive: true });
    }
    const destPath = path.join(destDir, csvName);
    fs.renameSync(csvPath, destPath);

    // --- Étape 3 : parser le CSV avec stream ---
    await new Promise((resolve, reject) => {
      fs.createReadStream(destPath)
        .pipe(csv()) // chaque ligne est un objet JS
        .on("data", async (row) => {
          try {
            // ici tu insères en BDD (ligne par ligne ou batch)
            await insertRowInDB(row);
          } catch (err) {
            console.error("Erreur d’insertion:", err);
          }
        })
        .on("end", () => {
          console.log("CSV entièrement parsé et inséré en BDD ✅");
          resolve();
        })
        .on("error", (err) => reject(err));
    });

    res.json({ success: true, file: destPath });
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, error: err.message });
  }
};
